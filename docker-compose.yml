version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: cicd_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: cicd_dashboard
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - cicd_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cicd_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cicd_network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cicd_backend
    restart: unless-stopped
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/cicd_dashboard?authSource=admin
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    depends_on:
      - mongodb
      - redis
    networks:
      - cicd_network
    command: python app.py

  # Frontend Application (Development Mode)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: cicd_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - cicd_network

  # Frontend Application (Production Mode)
  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cicd_frontend_prod
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_ENV=production
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - cicd_network
    profiles:
      - production

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: cicd_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend-prod
    networks:
      - cicd_network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  cicd_network:
    driver: bridge
